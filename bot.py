from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters
)

BOT_TOKEN = "7163340236:AAFae9HD45xQbD0dG1ueI4eJMRvL5IYKFGk"
ADMIN_ID = 417731116

# –°–æ—Å—Ç–æ—è–Ω–∏—è
QUESTION, ORDER = range(2)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu_keyboard():
    return ReplyKeyboardMarkup([
        ["–¢–æ–≤–∞—Ä—ã –∏ —Ü–µ–Ω—ã", "–î–æ—Å—Ç–∞–≤–∫–∞"],
        ["–ù–∞—à –∞–¥—Ä–µ—Å", "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"],
        ["–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?"]
    ], resize_keyboard=True)

# –ú–µ–Ω—é "–ù–∞–∑–∞–¥"
back_menu = ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], resize_keyboard=True)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_first_name = update.effective_user.first_name
    await update.message.reply_text(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_first_name}! \n–†–∞–¥—ã, —á—Ç–æ –≤—ã –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏.\n–£ –Ω–∞—Å —Ç–∞–∫–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:",
        reply_markup=main_menu_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–¢–æ–≤–∞—Ä—ã –∏ —Ü–µ–Ω—ã":
        await update.message.reply_text(
            "–ü—Ä–∞–π—Å –Ω–∞ –Ω–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n"
            "\n–¢–æ–º–∞—Ç –∂—ë–ª—Ç—ã–π (–ü–æ–ª—å—à–∞) 18—Ä/–∫–≥"
            "\n–¢–æ–º–∞—Ç —Ä–æ–∑–æ–≤—ã–π (–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω) 15.50—Ä/–∫–≥"
            "\n–ü–µ—Ä–µ—Ü –∂—ë–ª—Ç—ã–π (–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω) 14—Ä/–∫–≥"
            "\n–ü–µ—Ä–µ—Ü –∫—Ä–∞—Å–Ω—ã–π (–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω) 14—Ä/–∫–≥"
            "\n–û–≥—É—Ä–µ—Ü –∫–æ—Ä–æ—Ç–∫–æ–ø–ª–æ–¥–Ω—ã–π –∫–æ–ª—é—á–∏–π (–†–§) 7.2—Ä/–∫–≥"
            "\n–û–≥—É—Ä–µ—Ü –ó–æ–∑—É–ª—è (–†–ë) 6.5—Ä/–∫–≥"
            "\n–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å –º–æ–ª–æ–¥–æ–π (–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω) 5.50—Ä/–∫–≥"
            "\n–†–µ–¥–∏—Å (–†–§) 6.50—Ä/–∫–≥"
            "\n–ö–ª—É–±–Ω–∏–∫–∞ –ê–∑–∏—è (–†–ë) 20—Ä/–∫–≥"
            "\n–ö–ª—É–±–Ω–∏–∫–∞ –ê–ª—å–±–∞ (–†–ë) 25—Ä/–∫–≥"
            "\n–ß–µ—Ä–µ—à–Ω—è (–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω) 25—Ä/–∫–≥"
            "\n–ö–∞–ø—É—Å—Ç–∞ –º–æ–ª–æ–¥–∞—è (–†–§) 4.50—Ä/–∫–≥"
            "\n–î—ã–Ω—è (–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω) 10.50—Ä/–∫–≥"
            "\n–ê—Ä–±—É–∑ (–ò—Ä–∞–Ω) 6.50—Ä/–∫–≥",
            reply_markup=back_menu
        )
    elif text == "–î–æ—Å—Ç–∞–≤–∫–∞":
        await update.message.reply_text(
            "–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
            "–î–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—à–∏ —Ñ—Ä—É–∫—Ç—ã –æ—Ç 40 –¥–æ 100 —Ä—É–±–ª–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
            "–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 20 –∫–º –æ—Ç –Ω–∞—à–µ–π —Ç–æ—á–∫–∏!",
            reply_markup=back_menu
        )
    elif text == "–ù–∞—à –∞–¥—Ä–µ—Å":
        await update.message.reply_text(
            "–ù–∞—à –∞–¥—Ä–µ—Å: –õ–æ–≥–æ–π—Å–∫–∞—è, —É–ª–∏—Ü–∞ 5–ê, –í–∞–ª–µ—Ä—å—è–Ω–æ–≤–æ, –ú–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
            reply_markup=back_menu
        )
    elif text == "–ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())
    elif text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º:")
        return QUESTION
    elif text == "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑ (–ò–º—è, –¢–µ–ª–µ—Ñ–æ–Ω, –ê–¥—Ä–µ—Å):")
        return ORDER
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.", reply_markup=main_menu_keyboard())

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
async def handle_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message = update.message.text

    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç {user.full_name} (@{user.username or '–±–µ–∑ –Ω–∏–∫–∞'}):\n\n{message}"
    )
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.", reply_markup=main_menu_keyboard())
    return ConversationHandler.END

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async def handle_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message = update.message.text

    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {user.full_name} (@{user.username or '–±–µ–∑ –Ω–∏–∫–∞'}):\n\n{message}"
    )
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.", reply_markup=main_menu_keyboard())
    return ConversationHandler.END

# /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard())
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    question_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\?$"), handle_message)],
        states={
            QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    order_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑$"), handle_message)],
        states={
            ORDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_order)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(question_conv)
    app.add_handler(order_conv)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
